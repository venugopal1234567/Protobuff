// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.12.0
// source: findmaxpb/findmax.proto

package findmax

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Number struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num int32 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *Number) Reset() {
	*x = Number{}
	if protoimpl.UnsafeEnabled {
		mi := &file_findmaxpb_findmax_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Number) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Number) ProtoMessage() {}

func (x *Number) ProtoReflect() protoreflect.Message {
	mi := &file_findmaxpb_findmax_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Number.ProtoReflect.Descriptor instead.
func (*Number) Descriptor() ([]byte, []int) {
	return file_findmaxpb_findmax_proto_rawDescGZIP(), []int{0}
}

func (x *Number) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type FindMaxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number *Number `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *FindMaxRequest) Reset() {
	*x = FindMaxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_findmaxpb_findmax_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindMaxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMaxRequest) ProtoMessage() {}

func (x *FindMaxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_findmaxpb_findmax_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMaxRequest.ProtoReflect.Descriptor instead.
func (*FindMaxRequest) Descriptor() ([]byte, []int) {
	return file_findmaxpb_findmax_proto_rawDescGZIP(), []int{1}
}

func (x *FindMaxRequest) GetNumber() *Number {
	if x != nil {
		return x.Number
	}
	return nil
}

type FindMaxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *FindMaxResponse) Reset() {
	*x = FindMaxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_findmaxpb_findmax_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindMaxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMaxResponse) ProtoMessage() {}

func (x *FindMaxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_findmaxpb_findmax_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMaxResponse.ProtoReflect.Descriptor instead.
func (*FindMaxResponse) Descriptor() ([]byte, []int) {
	return file_findmaxpb_findmax_proto_rawDescGZIP(), []int{2}
}

func (x *FindMaxResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

var File_findmaxpb_findmax_proto protoreflect.FileDescriptor

var file_findmaxpb_findmax_proto_rawDesc = []byte{
	0x0a, 0x17, 0x66, 0x69, 0x6e, 0x64, 0x6d, 0x61, 0x78, 0x70, 0x62, 0x2f, 0x66, 0x69, 0x6e, 0x64,
	0x6d, 0x61, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x66, 0x69, 0x6e, 0x64, 0x6d,
	0x61, 0x78, 0x22, 0x1a, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x39,
	0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x6d, 0x61, 0x78, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x29, 0x0a, 0x0f, 0x46, 0x69, 0x6e,
	0x64, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x54, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61,
	0x78, 0x12, 0x17, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x6d, 0x61, 0x78, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x69, 0x6e,
	0x64, 0x6d, 0x61, 0x78, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x09, 0x5a, 0x07, 0x66, 0x69,
	0x6e, 0x64, 0x6d, 0x61, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_findmaxpb_findmax_proto_rawDescOnce sync.Once
	file_findmaxpb_findmax_proto_rawDescData = file_findmaxpb_findmax_proto_rawDesc
)

func file_findmaxpb_findmax_proto_rawDescGZIP() []byte {
	file_findmaxpb_findmax_proto_rawDescOnce.Do(func() {
		file_findmaxpb_findmax_proto_rawDescData = protoimpl.X.CompressGZIP(file_findmaxpb_findmax_proto_rawDescData)
	})
	return file_findmaxpb_findmax_proto_rawDescData
}

var file_findmaxpb_findmax_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_findmaxpb_findmax_proto_goTypes = []interface{}{
	(*Number)(nil),          // 0: findmax.Number
	(*FindMaxRequest)(nil),  // 1: findmax.FindMaxRequest
	(*FindMaxResponse)(nil), // 2: findmax.FindMaxResponse
}
var file_findmaxpb_findmax_proto_depIdxs = []int32{
	0, // 0: findmax.FindMaxRequest.number:type_name -> findmax.Number
	1, // 1: findmax.FindMaxService.FindMax:input_type -> findmax.FindMaxRequest
	2, // 2: findmax.FindMaxService.FindMax:output_type -> findmax.FindMaxResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_findmaxpb_findmax_proto_init() }
func file_findmaxpb_findmax_proto_init() {
	if File_findmaxpb_findmax_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_findmaxpb_findmax_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Number); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_findmaxpb_findmax_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindMaxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_findmaxpb_findmax_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindMaxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_findmaxpb_findmax_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_findmaxpb_findmax_proto_goTypes,
		DependencyIndexes: file_findmaxpb_findmax_proto_depIdxs,
		MessageInfos:      file_findmaxpb_findmax_proto_msgTypes,
	}.Build()
	File_findmaxpb_findmax_proto = out.File
	file_findmaxpb_findmax_proto_rawDesc = nil
	file_findmaxpb_findmax_proto_goTypes = nil
	file_findmaxpb_findmax_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FindMaxServiceClient is the client API for FindMaxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FindMaxServiceClient interface {
	FindMax(ctx context.Context, opts ...grpc.CallOption) (FindMaxService_FindMaxClient, error)
}

type findMaxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFindMaxServiceClient(cc grpc.ClientConnInterface) FindMaxServiceClient {
	return &findMaxServiceClient{cc}
}

func (c *findMaxServiceClient) FindMax(ctx context.Context, opts ...grpc.CallOption) (FindMaxService_FindMaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FindMaxService_serviceDesc.Streams[0], "/findmax.FindMaxService/FindMax", opts...)
	if err != nil {
		return nil, err
	}
	x := &findMaxServiceFindMaxClient{stream}
	return x, nil
}

type FindMaxService_FindMaxClient interface {
	Send(*FindMaxRequest) error
	Recv() (*FindMaxResponse, error)
	grpc.ClientStream
}

type findMaxServiceFindMaxClient struct {
	grpc.ClientStream
}

func (x *findMaxServiceFindMaxClient) Send(m *FindMaxRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *findMaxServiceFindMaxClient) Recv() (*FindMaxResponse, error) {
	m := new(FindMaxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FindMaxServiceServer is the server API for FindMaxService service.
type FindMaxServiceServer interface {
	FindMax(FindMaxService_FindMaxServer) error
}

// UnimplementedFindMaxServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFindMaxServiceServer struct {
}

func (*UnimplementedFindMaxServiceServer) FindMax(FindMaxService_FindMaxServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMax not implemented")
}

func RegisterFindMaxServiceServer(s *grpc.Server, srv FindMaxServiceServer) {
	s.RegisterService(&_FindMaxService_serviceDesc, srv)
}

func _FindMaxService_FindMax_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FindMaxServiceServer).FindMax(&findMaxServiceFindMaxServer{stream})
}

type FindMaxService_FindMaxServer interface {
	Send(*FindMaxResponse) error
	Recv() (*FindMaxRequest, error)
	grpc.ServerStream
}

type findMaxServiceFindMaxServer struct {
	grpc.ServerStream
}

func (x *findMaxServiceFindMaxServer) Send(m *FindMaxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *findMaxServiceFindMaxServer) Recv() (*FindMaxRequest, error) {
	m := new(FindMaxRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FindMaxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "findmax.FindMaxService",
	HandlerType: (*FindMaxServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindMax",
			Handler:       _FindMaxService_FindMax_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "findmaxpb/findmax.proto",
}
